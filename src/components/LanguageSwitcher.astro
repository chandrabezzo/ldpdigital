---
---

<div class="language-switcher">
  <button class="lang-btn" id="langBtn">
    <svg class="lang-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="12" cy="12" r="10"/>
      <path d="M2 12h20"/>
      <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"/>
    </svg>
    <span id="currentLang">ID</span>
    <svg class="chevron" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <polyline points="6,9 12,15 18,9"/>
    </svg>
  </button>
  
  <div class="lang-dropdown" id="langDropdown">
    <button class="lang-option" data-lang="id">
      <span class="flag">ðŸ‡®ðŸ‡©</span>
      <span>Bahasa Indonesia</span>
    </button>
    <button class="lang-option" data-lang="en">
      <span class="flag">ðŸ‡ºðŸ‡¸</span>
      <span>English</span>
    </button>
  </div>
</div>

<style>
  .language-switcher {
    position: relative;
    display: inline-block;
  }

  .lang-btn {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: 0.5rem 0.75rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--border-radius);
    color: white;
    cursor: pointer;
    transition: var(--transition);
    font-size: 0.875rem;
    font-weight: 500;
  }

  .lang-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.3);
  }

  .lang-icon,
  .chevron {
    width: 16px;
    height: 16px;
  }

  .chevron {
    transition: var(--transition);
  }

  .lang-btn.active .chevron {
    transform: rotate(180deg);
  }

  .lang-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 0.25rem;
    background: white;
    border: 1px solid var(--neutral-200);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
    min-width: 180px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: var(--transition);
    z-index: 1000;
  }

  .lang-dropdown.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .lang-option {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    width: 100%;
    padding: 0.75rem 1rem;
    background: none;
    border: none;
    text-align: left;
    cursor: pointer;
    transition: var(--transition);
    color: var(--neutral-700);
    font-size: 0.875rem;
  }

  .lang-option:hover {
    background: var(--neutral-50);
  }

  .lang-option:first-child {
    border-radius: var(--border-radius) var(--border-radius) 0 0;
  }

  .lang-option:last-child {
    border-radius: 0 0 var(--border-radius) var(--border-radius);
  }

  .flag {
    font-size: 1.125rem;
  }

  /* Mobile styles */
  @media (max-width: 768px) {
    .lang-btn {
      padding: 0.375rem 0.5rem;
      font-size: 0.8rem;
    }

    .lang-icon,
    .chevron {
      width: 14px;
      height: 14px;
    }

    .lang-dropdown {
      right: -1rem;
      min-width: 160px;
    }

    .lang-option {
      padding: 0.625rem 0.875rem;
      font-size: 0.8rem;
    }
  }
</style>

<script>
  import { getCurrentLanguage, setLanguage, getTranslation } from '../utils/i18n';

  document.addEventListener('DOMContentLoaded', () => {
    const langBtn = document.getElementById('langBtn');
    const langDropdown = document.getElementById('langDropdown');
    const currentLangSpan = document.getElementById('currentLang');
    const langOptions = document.querySelectorAll('.lang-option');

    // Initialize current language
    const currentLang = getCurrentLanguage();
    if (currentLangSpan) {
      currentLangSpan.textContent = currentLang.toUpperCase();
    }

    // Toggle dropdown
    langBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      langBtn.classList.toggle('active');
      langDropdown?.classList.toggle('active');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', () => {
      langBtn?.classList.remove('active');
      langDropdown?.classList.remove('active');
    });

    // Handle language selection
    langOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        const selectedLang = (e.currentTarget as HTMLElement).dataset.lang as 'en' | 'id';
        if (selectedLang) {
          setLanguage(selectedLang);
          if (currentLangSpan) {
            currentLangSpan.textContent = selectedLang.toUpperCase();
          }
          langBtn?.classList.remove('active');
          langDropdown?.classList.remove('active');
          
          // Reload page to apply new language
          window.location.reload();
        }
      });
    });
  });
</script>